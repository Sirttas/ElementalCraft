buildscript {
    repositories {
		mavenLocal()
    	mavenCentral()
        maven { url = 'https://reposilite.shendai.rip/public' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'java'
    id 'eclipse'
	id 'maven-publish'
	id "org.sonarqube" version "${sonar_version}"
	id "com.matthewprenger.cursegradle" version '1.4.+'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

mixin {
	disableEclipseAddon
    add sourceSets.main, "elementalcraft.refmap.json"
    config 'elementalcraft.mixins.json'
}

version = project.hasProperty('tag_version') ? "${minecraft_version}-${tag_version}" : "${elementalcraft_version}"
group = 'sirttas.elementalcraft'
archivesBaseName = 'elementalcraft'

logger.info('Building Elemental Craft: ' + project.version)

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
    	resources {
    		srcDir 'src/generated/resources'
		}
		compileClasspath += api.output
        runtimeClasspath += api.output
	}
    datagen {
        java {
            srcDir 'src/datagen/java'
        }
    }
}

ext.updateSourceSetMapping = { sourceSet ->
	if (project.hasProperty('UPDATE_MAPPINGS')) {
		extractRangeMap.sources += sourceSet.java.srcDirs
		applyRangeMap.sources += sourceSet.java.srcDirs
		sourceSet.java.srcDirs.each { src -> 
			extractMappedNew.addTarget(src) 
		}
	}
}

configurations {
	apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
    datagenCompile.extendsFrom(compile)
    datagenImplementation.extendsFrom(implementation)
    datagenCompileOnly.extendsFrom(compileOnly)
    datagenRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformer file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.debug.verbose', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                elementalcraft {
                    source sourceSets.api
                    source sourceSets.main
                }
                try {
                    dpanvil {
                        source project(":DPAnvil").sourceSets.api
                        source project(":DPAnvil").sourceSets.main
                    }
                } catch (e) { }
            }
        }

        server {
            workingDirectory project.file('run-server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug.verbose', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                elementalcraft {
                    source sourceSets.api
                    source sourceSets.main
                }
                try {
                    dpanvil {
                        source project(":DPAnvil").sourceSets.api
                        source project(":DPAnvil").sourceSets.main
                    }
                } catch (e) { }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            args '--mod', 'elementalcraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                elementalcraft {
                    sources sourceSets.api
                    source sourceSets.main
                    source sourceSets.datagen
                }
                try {
                    dpanvil {
                        source project(":DPAnvil").sourceSets.api
                        source project(":DPAnvil").sourceSets.main
                    }
                } catch (e) { }
            }
        }
    }
}

repositories {
    mavenCentral()
    flatDir { dirs 'libs', '../libs', '../DPAnvil/build/libs' }
    maven { url "https://reposilite.shendai.rip/public" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    
  	annotationProcessor "org.spongepowered:mixin:${mixins_version}:processor"
    
    // mod dependencies
    try {
        apiCompileOnly project(":DPAnvil").sourceSets.api.output
        compileOnly project(":DPAnvil").sourceSets.api.output
        datagenCompileOnly project(":DPAnvil").sourceSets.api.output
        runtimeOnly project(":DPAnvil").sourceSets.main.output
        datagenRuntimeOnly project(":DPAnvil").sourceSets.main.output
    } catch (e) {
        logger.info("DPAnvil not found locally, looking in maven repo")
        logger.debug("Exception: ", e)
        compileOnly fg.deobf("sirttas.dpanvil:DPAnvil:${dpanvil_version}:api")
        runtimeOnly fg.deobf("sirttas.dpanvil:DPAnvil:${dpanvil_version}")
    }

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    
    // mod interactions
    implementation fg.deobf("mezz.jei:jei-${jei_version}")

    compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")
    
    // datagen
    datagenImplementation sourceSets.api.output
    datagenImplementation sourceSets.main.output
    datagenImplementation fg.deobf("mekanism:Mekanism:${mekanism_version}")
    datagenImplementation fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")
    datagenImplementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    datagenImplementation fg.deobf("vazkii.botania:Botania:${botania_version}")
    datagenImplementation fg.deobf("net.silentchaos512:silent-gear:${silentgear_version}") {
        exclude module: 'forge'
        exclude module: 'jei-1.18.2'
        exclude module: 'silent-lib'
        exclude module: 'curios-forge'
    }
    datagenImplementation fg.deobf("net.silentchaos512:silent-lib:${silentlib_version}") {
        exclude module: 'forge'
    }
}

jar {
	from sourceSets.api.output
    from sourceSets.main.output
    
    manifest {
        attributes([
            "Specification-Title": "ElementalCraft",
            "Specification-Vendor": "elementalcraft",
            "Specification-Version": "${version}",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"elementalcraft",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "elementalcraft.mixins.json"
        ])
    }
    afterEvaluate { finalizedBy('reobfJar') }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
    afterEvaluate { finalizedBy('reobfJar') }
}

task datagenJar(type: Jar) {
    archiveClassifier = "datagen"
    from sourceSets.datagen.output
    afterEvaluate { finalizedBy('reobfJar') }
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    from sourceSets.datagen.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

build.dependsOn tasks.apiJar
build.dependsOn tasks.sourcesJar
build.dependsOn tasks.datagenJar

updateSourceSetMapping(sourceSets.api)
updateSourceSetMapping(sourceSets.datagen)

sonarqube {
	properties {
    	property "sonar.projectKey", "Sirttas_ElementalCraft"
    	property "sonar.organization", "sirttas"
    	property "sonar.host.url", "https://sonarcloud.io"
    	properties["sonar.sources"] += sourceSets.api.java.srcDirs
    	properties["sonar.sources"] += sourceSets.datagen.java.srcDirs
	}
}

def modmaven_user = System.getenv("MODMAVEN_USER") ?: project.findProperty("modmaven_user")
def modmaven_password = System.getenv("MODMAVEN_PASSWORD") ?: project.findProperty("modmaven_password")
def use_modmaven = modmaven_user != null && modmaven_password != null
def shendai_reposlite_user = System.getenv("SHENDAI_REPOSLITE_USER") ?: project.findProperty("shendai_reposlite_user")
def shendai_reposlite_password = System.getenv("SHENDAI_REPOSLITE_PASSWORD") ?: project.findProperty("shendai_reposlite_password")
def use_shendai_reposlite = shendai_reposlite_user != null && shendai_reposlite_password != null

if (use_modmaven || use_shendai_reposlite) {
    if (use_modmaven) {
        logger.info("Maven publish setup for modmaven")
    }
    if (use_shendai_reposlite) {
        logger.info("Maven publish setup for shendai reposlite")
    }
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
	        	artifactId = 'ElementalCraft'
				artifacts = [apiJar, jar, sourcesJar, datagenJar]
	        }
	    }
	    
	    repositories {
            if (use_modmaven) {
                maven {
                    name = "ModMaven"
                    url = 'https://modmaven.dev/artifactory/local-releases/'
                    credentials {
                        username = modmaven_user
                        password = modmaven_password
                    }
                }
            }
            if (use_shendai_reposlite) {
                maven {
                    name = "ShendaiReposLite"
                    url = 'https://reposilite.shendai.rip/releases'
                    credentials {
                        username = shendai_reposlite_user
                        password = shendai_reposlite_password
                    }
                }
            }
	    }
	}
}

if (System.getenv("CURSEFORGE_KEY") != null || project.hasProperty('curseforge_key')) {
	curseforge {
		apiKey = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforge_key")

		def changeLog = { ->
			def generatedChangelog = ""
			def changeStart = false
			def changeEnd = false

			println('Changelog:')

			def changelogFile = file('changelog.txt').withReader { reader ->
				def line

		        while ((line = reader.readLine()) != null && !changeEnd) {
		        	if (line ==~ '^\\s*- .*') {
		        		changeStart = true
		        	} else if (changeStart) {
		        		changeEnd = true
		        	}
					if (changeStart && !changeEnd) {
						println(line)
						generatedChangelog += line + '\n'
					}
				}
			}
			return generatedChangelog
		}

		project {
			id = '395158'
			changelog = changeLog
			releaseType = "${curse_release_type}"
			mainArtifact(jar) {
				relations {
					requiredDependency 'datapack-anvil'
                    requiredDependency 'patchouli'
                    optionalDependency  'jei'
	        		incompatible 'performant'
				}
			}
			addGameVersion "${minecraft_version}"
		}
	}
}
