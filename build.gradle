import net.darkhax.curseforgegradle.TaskPublishCurseForge
import net.neoforged.gradle.common.runtime.tasks.DownloadAssets

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'jacoco'
    id 'net.neoforged.gradle.userdev' version "${neogradle_version}"

    id "org.sonarqube" version "${sonar_version}"
    id 'net.darkhax.curseforgegradle' version '1.1.+'
    id "com.modrinth.minotaur" version "2.+"
}

version = project.hasProperty('tag_version') ? "${minecraft_version}-${tag_version}" : "${elementalcraft_version}"
group = 'sirttas.elementalcraft'

repositories {
    mavenCentral()
    flatDir { dirs 'libs', '../libs', '../DPAnvil/build/libs' }
    maven { url "https://repo.elementalcraft.org/public" }
}

base {
    archivesName = 'elementalcraft'
}

logger.info('Building Elemental Craft: ' + project.version)

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
        resources {
            srcDir 'src/generated/resources'
        }
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
    datagen {
        java {
            srcDir 'src/datagen/java'
        }
    }
    test {
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
}

minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'fml.earlyprogresswindow', 'false'
        systemProperty 'mixin.debug.verbose', 'true'

        modSource sourceSets.api
        modSource sourceSets.main

        def dpAnvil = findProject(':DPAnvil')

        if (dpAnvil != null) {
            modSource dpAnvil.sourceSets.api
            modSource dpAnvil.sourceSets.main
        }

        dependencies {
            runtime "org.assertj:assertj-core:${assertj_version}"
        }
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', 'elementalcraft'

        modSource sourceSets.test
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', 'elementalcraft'
        programArgument '--nogui'

        modSource sourceSets.test
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', 'elementalcraft'

        modSource sourceSets.test
    }
    data {
        programArguments.addAll '--mod', 'elementalcraft', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()

        modSource sourceSets.datagen
    }
}

ext.updateSourceSetMapping = { sourceSet ->
	if (project.hasProperty('UPDATE_MAPPINGS')) {
		extractRangeMap.sources += sourceSet.java.srcDirs
		applyRangeMap.sources += sourceSet.java.srcDirs
		sourceSet.java.srcDirs.each { src -> 
			extractMappedNew.addTarget(src) 
		}
	}
}

configurations {
	apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
    datagenCompile.extendsFrom(compile)
    datagenImplementation.extendsFrom(implementation)
    datagenCompileOnly.extendsFrom(compileOnly)
    datagenRuntimeOnly.extendsFrom(runtimeOnly)
    testCompile.extendsFrom(compile)
    testImplementation.extendsFrom(implementation)
    testCompileOnly.extendsFrom(compileOnly)
    testRuntimeOnly.extendsFrom(runtimeOnly)
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    // mod dependencies
    def dpAnvil = findProject(':DPAnvil')

    if (dpAnvil != null) {
        apiCompileOnly dpAnvil.sourceSets.api.output
        compileOnly dpAnvil.sourceSets.api.output
        datagenCompileOnly dpAnvil.sourceSets.api.output
        runtimeOnly dpAnvil.sourceSets.main.output
        datagenRuntimeOnly dpAnvil.sourceSets.main.output
    } else {
        logger.info("DPAnvil not found locally, looking in maven repo")
        compileOnly "sirttas.dpanvil:DPAnvil:${dpanvil_version}:api"
        runtimeOnly "sirttas.dpanvil:DPAnvil:${dpanvil_version}"
    }

    compileOnly "vazkii.patchouli:Patchouli:${patchouli_version}:api"
    runtimeOnly "vazkii.patchouli:Patchouli:${patchouli_version}"
    
    // mod interactions
    implementation "mezz.jei:jei-${jei_version_prefix}:${jei_version}"

    compileOnly "mekanism:Mekanism:${mekanism_version}"
    compileOnly "blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}"

    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}:api"
    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"

    compileOnly "vazkii.botania:Botania:${botania_version}:api"
    // runtimeOnly "vazkii.botania:Botania:${botania_version}"

    // test
    testImplementation sourceSets.api.output
    testImplementation sourceSets.main.output
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    testImplementation "org.assertj:assertj-core:${assertj_version}"

    // datagen
    datagenImplementation sourceSets.api.output
    datagenImplementation sourceSets.main.output
    datagenImplementation "vazkii.patchouli:Patchouli:${patchouli_version}"
    datagenImplementation "mekanism:Mekanism:${mekanism_version}"
    datagenImplementation "blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}"
    datagenImplementation "top.theillusivec4.curios:curios-neoforge:${curios_version}"
    // datagenImplementation "vazkii.botania:Botania:${botania_version}"
    /* datagenImplementation("net.silentchaos512:silent-gear:${silentgear_version}") {
        exclude module: 'forge'
        exclude module: "jei-${jei_version_prefix}"
        exclude module: 'silent-lib'
        exclude module: 'curios-forge'
    }
    datagenImplementation("net.silentchaos512:silent-lib:${silentlib_version}") {
        exclude module: 'forge'
    } */
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version: neo_version,
            neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            pack_format_number: pack_format_number,

            dpanvil_version: dpanvil_version,
            dpanvil_version_range: dpanvil_version_range,
            patchouli_version_range: patchouli_version_range,
            jei_version_range: jei_version_range,
            mekanism_version_range: mekanism_version_range,
            curios_version_range: curios_version_range,

            elementalcraft_version: elementalcraft_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties
    }
}

def dpAnvil = findProject(':DPAnvil')

if (dpAnvil != null) {
    tasks.withType(DownloadAssets).configureEach { it ->
        it.dependsOn dpAnvil.tasks.withType(DownloadAssets)
    }
}

jar {
	from sourceSets.api.output
    from sourceSets.main.output
    
    manifest {
        attributes([
            "Specification-Title": "ElementalCraft",
            "Specification-Vendor": "elementalcraft",
            "Specification-Version": "${version}",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"elementalcraft",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
}

task datagenJar(type: Jar) {
    archiveClassifier = "datagen"
    from sourceSets.datagen.output
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    from sourceSets.datagen.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

build.dependsOn tasks.apiJar
build.dependsOn tasks.sourcesJar
build.dependsOn tasks.datagenJar

updateSourceSetMapping(sourceSets.api)
updateSourceSetMapping(sourceSets.datagen)
updateSourceSetMapping(sourceSets.test)

test {
    useJUnitPlatform()
    jacoco {
        includeNoLocationClasses = true
        includes = ["sirttas.elementalcraft.*"]
    }
}
jacoco {
    toolVersion = "0.8.9"
}
jacocoTestReport {
    // dependsOn 'test'
    dependsOn 'runGameTestServer'
    reports {
        xml.required.set(true)
    }
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}
tasks.configureEach {
    if (it.name == 'runGameTestServer') {
        JacocoPluginExtension jacoco = project.extensions.getByType(JacocoPluginExtension)

        jacoco.applyTo(it)
        it.extensions.configure(JacocoTaskExtension) { extension ->
            extension.includeNoLocationClasses = true
            extension.includes = ["sirttas.elementalcraft.*"]
        }
    }
}

sonarqube {
	properties {
    	property "sonar.projectKey", "Sirttas_ElementalCraft"
    	property "sonar.organization", "sirttas"
    	property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/*.exec"
        property "sonar.coverage.exclusions", "src/datagen/**"
    	properties["sonar.sources"] += sourceSets.api.java.srcDirs
    	properties["sonar.sources"] += sourceSets.datagen.java.srcDirs
	}
}
project.tasks["sonarqube"].dependsOn "jacocoTestReport"

def modmaven_user = System.getenv("MODMAVEN_USER") ?: project.findProperty("modmaven_user")
def modmaven_password = System.getenv("MODMAVEN_PASSWORD") ?: project.findProperty("modmaven_password")
def use_modmaven = modmaven_user != null && modmaven_password != null
def elemental_craft_repo_user = System.getenv("ELEMENTAL_CRAFT_REPO_USER") ?: project.findProperty("elemental_craft_repo_user")
def elemental_craft_repo_password = System.getenv("ELEMENTAL_CRAFT_REPO_PASSWORD") ?: project.findProperty("elemental_craft_repo_password")
def use_elemental_craft_repo = elemental_craft_repo_user != null && elemental_craft_repo_password != null

if (use_modmaven || use_elemental_craft_repo) {
    if (use_modmaven) {
        logger.info("Maven publish setup for modmaven")
    }
    if (use_elemental_craft_repo) {
        logger.info("Maven publish setup for elementalcraft repo")
    }
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
	        	artifactId = 'ElementalCraft'
				artifacts = [apiJar, jar, sourcesJar, datagenJar]
	        }
	    }
	    
	    repositories {
            if (use_modmaven) {
                maven {
                    name = "ModMaven"
                    url = 'https://modmaven.dev/artifactory/local-releases/'
                    credentials {
                        username = modmaven_user
                        password = modmaven_password
                    }
                }
            }
            if (use_elemental_craft_repo) {
                maven {
                    name = "ElementalCraftRepo"
                    url = 'https://repo.elementalcraft.org/releases'
                    credentials {
                        username = elemental_craft_repo_user
                        password = elemental_craft_repo_password
                    }
                }
            }
	    }
	}
}

def curseforge_key = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforge_key")
def modrinth_token = System.getenv("MODRINTH_TOKEN") ?: project.findProperty("modrinth_token")
def changeLog
def releaseVersions = List.of(project.getProperty("release_versions").split(","))

if (curseforge_key != null || modrinth_token != null) {
    def generatedChangelog = ""
    def changeStart = false
    def changeEnd = false

    println('Changelog:')

    file('changelog.txt').withReader { reader ->
        def line

        while ((line = reader.readLine()) != null && !changeEnd) {
            if (line ==~ '^\\s*- .*') {
                changeStart = true
            } else if (changeStart) {
                changeEnd = true
            }
            if (changeStart && !changeEnd) {
                println(line)
                generatedChangelog += line + '\n'
            }
        }
    }
    changeLog = generatedChangelog
}

if (curseforge_key != null) {
    tasks.register("curseforge", TaskPublishCurseForge, { task ->
        apiToken = curseforge_key

        task.upload(395158, jar) { main ->
            releaseType = "${release_type}"
            changelog = changeLog
            releaseVersions.each { v -> addGameVersion(v) }
            addRequirement('datapack-anvil')
            addRequirement('patchouli')
            addOptional('jei')
            addOptional('curios')
            addIncompatibility('performant')
        }
	})
}

if (modrinth_token != null) {
    modrinth {
        token = modrinth_token
        projectId = "o51LXm0t"
        versionNumber = project.version
        versionType = "${release_type}"
        uploadFile = jar
        gameVersions = releaseVersions
        loaders.addAll("neoforge")
        changelog = changeLog
        dependencies {
            required.project "dpanvil"
            required.project "patchouli"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
