import net.minecraftforge.gradle.common.util.RunConfig

buildscript {
    repositories {
		mavenLocal()
    	mavenCentral()
        gradlePluginPortal()
        maven { url = 'https://repo.elementalcraft.org/public' }
    }
    dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
    }
}

plugins {
    id 'java'
    id 'eclipse'
	id 'maven-publish'
    id 'jacoco'
	id "org.sonarqube" version "${sonar_version}"
	id "com.matthewprenger.cursegradle" version '1.4.+'
    id "com.modrinth.minotaur" version "2.+"
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

mixin {
	disableEclipseAddon
    add sourceSets.main, "elementalcraft.refmap.json"
    config 'elementalcraft.mixins.json'
}

version = project.hasProperty('tag_version') ? "${minecraft_version}-${tag_version}" : "${elementalcraft_version}"
group = 'sirttas.elementalcraft'
archivesBaseName = 'elementalcraft'

logger.info('Building Elemental Craft: ' + project.version)

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
    	resources {
    		srcDir 'src/generated/resources'
		}
		compileClasspath += api.output
        runtimeClasspath += api.output
	}
    datagen {
        java {
            srcDir 'src/datagen/java'
        }
    }
    test {
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
}

ext.updateSourceSetMapping = { sourceSet ->
	if (project.hasProperty('UPDATE_MAPPINGS')) {
		extractRangeMap.sources += sourceSet.java.srcDirs
		applyRangeMap.sources += sourceSet.java.srcDirs
		sourceSet.java.srcDirs.each { src -> 
			extractMappedNew.addTarget(src) 
		}
	}
}

configurations {
	apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
    datagenCompile.extendsFrom(compile)
    datagenImplementation.extendsFrom(implementation)
    datagenCompileOnly.extendsFrom(compileOnly)
    datagenRuntimeOnly.extendsFrom(runtimeOnly)
    testCompile.extendsFrom(compile)
    testImplementation.extendsFrom(implementation)
    testCompileOnly.extendsFrom(compileOnly)
    testRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformer file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client { setupRunConfig((RunConfig) it, 'run') }
        server { setupRunConfig((RunConfig) it, 'run-server') }
        gameTestServer { setupRunConfig((RunConfig) it, 'test-server') }
        data {
            setupRunConfig((RunConfig) it, 'run', false)

            args '--mod', 'elementalcraft', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods.named('elementalcraft').configure {
                source((SourceSet) sourceSets.datagen)
            }
        }
    }
}

def setupRunConfig(RunConfig runConfig, String directory, boolean supportsGameTests = true) {
    runConfig.workingDirectory project.file(directory)

    runConfig.property 'forge.logging.markers', 'REGISTRIES'
    runConfig.property 'forge.logging.console.level', 'debug'
    runConfig.property 'fml.earlyprogresswindow', 'false'
    runConfig.property 'mixin.debug.verbose', 'true'
    runConfig.property 'mixin.env.remapRefMap', 'true'
    runConfig.property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
    runConfig.property 'forge.enableGameTest', "${supportsGameTests}"

    runConfig.forceExit = false

    runConfig.mods.register('elementalcraft').configure {
        if (supportsGameTests) {
            source((SourceSet) sourceSets.test)
        }
        source((SourceSet) sourceSets.main)
        source((SourceSet) sourceSets.api)
    }

    def dpAnvil = findProject(':DPAnvil')

    if (dpAnvil != null) {
        runConfig.mods.register('dpanvil').configure {
            source((SourceSet) dpAnvil.sourceSets.api)
            source((SourceSet) dpAnvil.sourceSets.main)
        }
    }
}

repositories {
    mavenCentral()
    flatDir { dirs 'libs', '../libs', '../DPAnvil/build/libs' }
    maven { url "https://repo.elementalcraft.org/public" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    
  	annotationProcessor "org.spongepowered:mixin:${mixins_version}:processor"
    
    // mod dependencies
    def dpAnvil = findProject(':DPAnvil')

    if (dpAnvil != null) {
        apiCompileOnly dpAnvil.sourceSets.api.output
        compileOnly dpAnvil.sourceSets.api.output
        datagenCompileOnly dpAnvil.sourceSets.api.output
        runtimeOnly dpAnvil.sourceSets.main.output
        datagenRuntimeOnly dpAnvil.sourceSets.main.output
    } else {
        logger.info("DPAnvil not found locally, looking in maven repo")
        compileOnly fg.deobf("sirttas.dpanvil:DPAnvil:${dpanvil_version}:api")
        runtimeOnly fg.deobf("sirttas.dpanvil:DPAnvil:${dpanvil_version}")
    }

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    
    // mod interactions
    implementation fg.deobf("mezz.jei:jei-${jei_version_prefix}:${jei_version}")

    compileOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")
    compileOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

    compileOnly fg.deobf("vazkii.botania:Botania:${botania_version}:api")
    // runtimeOnly fg.deobf("vazkii.botania:Botania:${botania_version}")

    // test
    testImplementation sourceSets.api.output
    testImplementation sourceSets.main.output
    minecraftLibrary "org.junit.jupiter:junit-jupiter-api:${junit_version}" // testImplementation
    minecraftLibrary "org.junit.jupiter:junit-jupiter-engine:${junit_version}" //testRuntimeOnly
    minecraftLibrary "org.assertj:assertj-core:${assertj_version}" // testImplementation

    // datagen
    datagenImplementation sourceSets.api.output
    datagenImplementation sourceSets.main.output
    datagenImplementation fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
    datagenImplementation fg.deobf("mekanism:Mekanism:${mekanism_version}")
    datagenImplementation fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${immersive_engineering_version}")
    datagenImplementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    datagenImplementation fg.deobf("vazkii.botania:Botania:${botania_version}")
    datagenImplementation fg.deobf("net.silentchaos512:silent-gear:${silentgear_version}") {
        exclude module: 'forge'
        exclude module: "jei-${jei_version_prefix}"
        exclude module: 'silent-lib'
        exclude module: 'curios-forge'
    }
    datagenImplementation fg.deobf("net.silentchaos512:silent-lib:${silentlib_version}") {
        exclude module: 'forge'
    }
}

jar {
	from sourceSets.api.output
    from sourceSets.main.output
    
    manifest {
        attributes([
            "Specification-Title": "ElementalCraft",
            "Specification-Vendor": "elementalcraft",
            "Specification-Version": "${version}",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"elementalcraft",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "elementalcraft.mixins.json"
        ])
    }
    afterEvaluate { finalizedBy('reobfJar') }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
    afterEvaluate { finalizedBy('reobfJar') }
}

task datagenJar(type: Jar) {
    archiveClassifier = "datagen"
    from sourceSets.datagen.output
    afterEvaluate { finalizedBy('reobfJar') }
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    from sourceSets.datagen.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

build.dependsOn tasks.apiJar
build.dependsOn tasks.sourcesJar
build.dependsOn tasks.datagenJar

updateSourceSetMapping(sourceSets.api)
updateSourceSetMapping(sourceSets.datagen)
updateSourceSetMapping(sourceSets.test)

test {
    useJUnitPlatform()
}
jacoco {
    toolVersion = "0.8.8"
}
jacocoTestReport {
    dependsOn 'test'
    dependsOn 'runGameTestServer'
    reports {
        xml.enabled true
    }
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}
tasks.configureEach {
    if (it.name == 'runGameTestServer') {
        JacocoPluginExtension jacoco = project.extensions.getByType(JacocoPluginExtension)

        jacoco.applyTo(it)
    }
}

sonarqube {
	properties {
    	property "sonar.projectKey", "Sirttas_ElementalCraft"
    	property "sonar.organization", "sirttas"
    	property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.jacoco.reportPaths", "${buildDir}/jacoco/*.exec"
    	properties["sonar.sources"] += sourceSets.api.java.srcDirs
    	properties["sonar.sources"] += sourceSets.datagen.java.srcDirs
	}
}
project.tasks["sonarqube"].dependsOn "jacocoTestReport"

def modmaven_user = System.getenv("MODMAVEN_USER") ?: project.findProperty("modmaven_user")
def modmaven_password = System.getenv("MODMAVEN_PASSWORD") ?: project.findProperty("modmaven_password")
def use_modmaven = modmaven_user != null && modmaven_password != null
def elemental_craft_repo_user = System.getenv("ELEMENTAL_CRAFT_REPO_USER") ?: project.findProperty("elemental_craft_repo_user")
def elemental_craft_repo_password = System.getenv("ELEMENTAL_CRAFT_REPO_PASSWORD") ?: project.findProperty("elemental_craft_repo_password")
def use_elemental_craft_repo = elemental_craft_repo_user != null && elemental_craft_repo_password != null

if (use_modmaven || use_elemental_craft_repo) {
    if (use_modmaven) {
        logger.info("Maven publish setup for modmaven")
    }
    if (use_elemental_craft_repo) {
        logger.info("Maven publish setup for elementalcraft repo")
    }
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
	        	artifactId = 'ElementalCraft'
				artifacts = [apiJar, jar, sourcesJar, datagenJar]
	        }
	    }
	    
	    repositories {
            if (use_modmaven) {
                maven {
                    name = "ModMaven"
                    url = 'https://modmaven.dev/artifactory/local-releases/'
                    credentials {
                        username = modmaven_user
                        password = modmaven_password
                    }
                }
            }
            if (use_elemental_craft_repo) {
                maven {
                    name = "ElementalCraftRepo"
                    url = 'https://repo.elementalcraft.org/releases'
                    credentials {
                        username = elemental_craft_repo_user
                        password = elemental_craft_repo_password
                    }
                }
            }
	    }
	}
}

def curseforge_key = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforge_key")
def modrinth_token = System.getenv("MODRINTH_TOKEN") ?: project.findProperty("modrinth_token")
def changeLog
def releaseVersions = List.of(project.getProperty("release_versions").split(","))

if (curseforge_key != null || modrinth_token != null) {
    def generatedChangelog = ""
    def changeStart = false
    def changeEnd = false

    println('Changelog:')

    file('changelog.txt').withReader { reader ->
        def line

        while ((line = reader.readLine()) != null && !changeEnd) {
            if (line ==~ '^\\s*- .*') {
                changeStart = true
            } else if (changeStart) {
                changeEnd = true
            }
            if (changeStart && !changeEnd) {
                println(line)
                generatedChangelog += line + '\n'
            }
        }
    }
    changeLog = generatedChangelog
}

if (curseforge_key != null) {
	curseforge {
		apiKey = curseforge_key

		project {
			id = '395158'
			changelog = changeLog
			releaseType = "${release_type}"
			mainArtifact(jar) {
				relations {
					requiredDependency 'datapack-anvil'
                    requiredDependency 'patchouli'
                    optionalDependency  'jei'
	        		incompatible 'performant'
				}
			}
            releaseVersions.each { v -> addGameVersion(v) }
		}
	}
}

if (modrinth_token != null) {
    modrinth {
        token = modrinth_token
        projectId = "o51LXm0t"
        versionNumber = project.version
        versionType = "${release_type}"
        uploadFile = jar
        gameVersions = releaseVersions
        loaders = ["forge"]
        changelog = changeLog
        dependencies {
            required.project "dpanvil"
            required.project "patchouli"
        }
    }
}
